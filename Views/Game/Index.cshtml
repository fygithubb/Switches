@model Switches.Services.SwitchGameService
@{
    ViewData["Title"] = "Switch Puzzle";
    var state = Model.GetStateString();
}

<style>
    .game-wrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        font-family: sans-serif;
        background: #f5f5f5;
        padding: 20px;
    }

    h2 {
        margin-bottom: 20px;
    }

    .lights {
        display: flex;
        justify-content: center;
        margin-bottom: 20px;
        gap: 20px;
    }

    .light {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: #ccc;
        box-shadow: 0 0 10px #888;
        transition: background 0.3s;
    }

        .light.on {
            background: #4caf50;
            box-shadow: 0 0 15px #4caf50;
        }

    .buttons {
        display: flex;
        justify-content: center;
        gap: 15px;
        margin-bottom: 20px;
    }

    button {
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        border: none;
        border-radius: 8px;
        background-color: #2196f3;
        color: white;
        transition: background-color 0.2s;
    }

        button:hover {
            background-color: #1976d2;
        }

    .status, .message {
        text-align: center;
        margin-top: 10px;
        font-size: 16px;
    }

        .message.success {
            color: green;
            font-weight: bold;
        }

        .message.error {
            color: red;
            font-weight: bold;
        }
</style>

<div class="game-wrapper">
    <h2>🧠 Switch Puzzle Game</h2>

    <div class="lights">
        @for (int i = 0; i < state.Length; i++)
        {
            <div class="light @(state[i] == '1' ? "on" : "")"></div>
        }
    </div>

    <div class="buttons">
        <button onclick="pressSwitch(0)">Switch A</button>
        <button onclick="pressSwitch(1)">Switch B</button>
        <button onclick="pressSwitch(2)">Switch C</button>
    </div>

    <div class="buttons">
        <button onclick="resetGame()">🔁 Reset</button>
    </div>

    <div class="status status-text">
        <p>State: <strong>@Model.GetStateString()</strong></p>
        <p>Moves Used: <strong>@Model.MoveCount</strong> / @Model.MaxMoves</p>
    </div>

    @if (Model.IsComplete)
    {
        <div class="message success">🎉 Puzzle Solved Successfully!</div>
    }
    else if (Model.OutOfMoves)
    {
        <div class="message error">❌ Out of Moves! Try again.</div>
    }
</div>

@section Scripts {
    <script>
        function updateUI(data) {
            const lights = document.querySelectorAll(".lights .light");
            for (let i = 0; i < lights.length; i++) {
                lights[i].className = "light " + (data.state[i] === "1" ? "on" : "");
            }

            document.querySelector(".status-text").innerHTML = `
                        <p>State: <strong>${data.state}</strong></p>
                        <p>Moves Used: <strong>${data.moves}</strong> / ${data.maxMoves}</p>
                    `;

            const oldMsg = document.querySelector(".message");
            if (oldMsg) oldMsg.remove();

            if (data.isComplete) {
                document.querySelector(".game-wrapper").insertAdjacentHTML("beforeend", `<div class="message success">🎉 Puzzle Solved Successfully!</div>`);
            } else if (data.gameOver) {
                document.querySelector(".game-wrapper").insertAdjacentHTML("beforeend", `<div class="message error">❌ Out of Moves! Try again.</div>`);
            }
        }

        function pressSwitch(id) {
            fetch("/Game/AjaxPress", {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: `id=${id}`
            })
                .then(res => res.json())
                .then(updateUI);
        }

        function resetGame() {
            fetch("/Game/AjaxReset", {
                method: "POST"
            })
                .then(res => res.json())
                .then(updateUI);
        }
    </script>
}
